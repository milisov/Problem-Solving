#include <bits/stdc++.h>

using namespace std;
vector<int>adj[1001];
int visited[1001]={0};
int a[1001],b[1001];
long long int n;
void dfs(int s)
{
    visited[s]=1;
    for(int i=0;i<adj[s].size();i++)
    {
        int t=adj[s][i];
        if(visited[t]==0)
        {
            dfs(t);
        }
    }
}
bool works(long long m)
{
    memset(visited,0,sizeof(visited));
    for(int i=0;i<n;i++)
    {
        adj[i].clear();
    }
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            int x=(a[i]-a[j])*(a[i]-a[j]);
            int y=(b[i]-b[j])*(b[i]-b[j]);
            if(x+y<=m)
            {
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }
    dfs(0);
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0)
        {
            return false;
        }
    }
    return true;
}
int main()
{
    freopen("moocast.in", "r", stdin);
    freopen("moocast.out", "w", stdout);
    cin>>n;
    //int a[n],b[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i]>>b[i];
    }
    long long int l = 0, r = 1e10, ans = 1e10;
    long long int mid=0;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(works(mid))
        {
            ans=mid;
            r=mid-1;
        }else
        {
            l=mid+1;
        }
    }
    cout<<ans<<endl;
}
