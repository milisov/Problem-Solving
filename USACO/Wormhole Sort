#include <bits/stdc++.h>

using namespace std;
int rankk[100001]={0};
int p[100001]={0};
int n,m;
int a[100001],b[100001],c[100001],w[100001];
int get(int x)
{
    if(x==p[x])
    {
        return x;
    }
    p[x]=get(p[x]);
    return p[x];
}
bool unite(int x,int y)
{
    x=get(x);
    y=get(y);
    if(x==y)
    {
        return false;
    }
    if(rankk[x]<rankk[y])
    {
        swap(x,y);
    }
    if(rankk[x]==rankk[y])
    {
        rankk[x]++;
    }
    p[y]=x;
    return true;
}
bool works(long long width)
{
    for(int i=1;i<=n;i++)
    {
        rankk[i]=0;
        p[i]=i;
    }
    for(int i=0;i<m;i++)
    {
        if(w[i]>=width)
        {
            unite(b[i],c[i]);
        }
    }
    for(int i=0;i<n;i++)
    {
        if(get(a[i])!=get(i+1))
        {
            return false;
        }
    }
    return true;
}
int main()
{
    freopen("wormsort.in", "r", stdin);
	freopen("wormsort.out", "w", stdout);
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    for(int i=0;i<m;i++)
    {
        cin>>b[i]>>c[i]>>w[i];
    }
    long long int l=1,r=1e9+1,mid=0;
    long long int ans=0;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(works(mid)==true)
        {
            ans=mid;
            l=mid+1;
        }else
        {
            r=mid-1;
        }
    }
    if(ans==1e9+1)
    {
        cout<<-1<<endl;
    }else
    {
    cout<<ans<<endl;
    }
}
