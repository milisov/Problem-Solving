#include <bits/stdc++.h>

using namespace std;
vector<int>adj[3001];
int visited[3001]={0};
int blocked[3001]={0};
int sz=0;
void dfs(int s)
{
    visited[s]=1;
    sz++;
    for(int i=0;i<adj[s].size();i++)
    {
        int t=adj[s][i];
        if(visited[t]==0 && blocked[t]==0)
        {
            dfs(t);
        }
    }
}
int main()
{
    freopen("closing.in", "r", stdin);
    freopen("closing.out", "w", stdout);
   int n,m;
   cin>>n>>m;
   int a[m],b[m];
   int x[n];
   for(int i=0;i<m;i++)
   {
       cin>>a[m]>>b[m];
       adj[a[m]].push_back(b[m]);
       adj[b[m]].push_back(a[m]);
   }
   for(int i=0;i<n;i++)
   {
       cin>>x[i];
   }
   for(int i=0;i<n;i++)
   {
       sz=0;
       memset(visited,0,sizeof(visited));
       for(int j=1;j<=n;j++)
       {
           if(visited[j]==0 && blocked[j]==0)
           {
               dfs(j);
               if(sz==(n-i))
               {
                   cout<<"YES"<<endl;
               }else
               {
                   cout<<"NO"<<endl;
               }
               break;
           }
       }
       blocked[x[i]]=1;
   }
}
