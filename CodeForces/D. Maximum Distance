// MST correctness
#include <bits/stdc++.h>

using namespace std;
int p[100001]= {0};
int rankk[100001]= {0};
int sizee[100001]= {0};
int get(int x)
{
    if(x==p[x])
    {
        return x;
    }
    p[x]=get(p[x]);
    return p[x];
}
bool unite(int x,int y)
{
    x=get(x);
    y=get(y);
    if(x==y)
    {
        return false;
    }
    if(rankk[x]<rankk[y])
    {
        swap(x,y);
    }
    if(rankk[x]==rankk[y])
    {
        rankk[x]++;
    }
    p[y]=x;
    sizee[x]=sizee[x]+sizee[y];
    return true;
}
int main()
{
    int n,m,k;
    cin>>n>>m>>k;
    for(int i=0; i<=n; i++)
    {
        // sizee[i]=1;
        p[i]=i;
        rankk[i]=0;
    }
    int a[k];
    int good[100001]= {0};
    for(int i=0; i<k; i++)
    {
        cin>>a[i];
        sizee[a[i]]=1;
    }
    //cout<<p[2]<<endl;
    //tuple<int,int,int>edges;
    long long int u,v,w;
    vector<pair<long long int, pair<long long int,long long int> > > edges;
    for(int i=0; i<m; i++)
    {
        cin>>u>>v>>w;
        edges.push_back(make_pair(w,make_pair(u,v)));
    }
    //cout<<sizee[1]<<endl;
    sort(edges.begin(),edges.end());
    long long int maks=0;
    for(int i=0; i<edges.size(); i++)
    {
        int xx=edges[i].second.first;
        int yy=edges[i].second.second;
        unite(xx,yy);
        if(sizee[get(xx)]==k)
        {
            maks=edges[i].first;
            break;
        }
    }
    for(int i=0;i<k;i++)
    {
        cout<<maks<<" ";
    }
    cout<<endl;
}
